package com.wutka.jfuncmachine.compiler.model.expr;

import com.wutka.jfuncmachine.compiler.classgen.ClassGenerator;
import com.wutka.jfuncmachine.compiler.classgen.Environment;
import com.wutka.jfuncmachine.compiler.model.expr.boxing.Autobox;
import com.wutka.jfuncmachine.compiler.model.types.Type;

/** An expression to invoke a static method.
 * This method differs from the methods in the javainterop package in that it can apply certain optimizations.
 * For example, if this method call is a recursive call to the method currently being defined, and the
 * localTailCallsToLoops option is true, this expression updates the local variables representing the
 * method parameters and jumps back to the beginning of the method.
 * Likewise, if full tail recursion is enabled, this method should be used for any methods generated by
 * JFuncMachine so it can implement the looping necessary to handle full tail calls.
 */
public class CallStaticMethod extends Expression {
    /** The name of the class containing the method */
    public final String className;
    /** The name of the method */
    public final String name;
    /** The method argument values */
    public final Expression[] arguments;
    /** The method parameter types */
    public final Type[] parameterTypes;
    /** The return type of the method */
    public final Type returnType;

    /** Create a static method invocation
     * @param className The name of the class containing the method
     * @param name The name of the method
     * @param parameterTypes The method parameter types
     * @param returnType The method return type
     * @param arguments The method argument values
     */
    public CallStaticMethod(String className, String name, Type[] parameterTypes, Type returnType,
                            Expression[] arguments) {
        super(null, 0);
        this.className = className;
        this.name = name;
        this.arguments = arguments;
        this.parameterTypes = parameterTypes;
        this.returnType = returnType;
    }

    /** Create a static method invocation
     * @param className The name of the class containing the method
     * @param name The name of the method
     * @param parameterTypes The method parameter types
     * @param returnType The method return type
     * @param arguments The method argument values
     * @param filename The source filename this expression is associated with
     * @param lineNumber The source line number this expression is associated with
     */
    public CallStaticMethod(String className, String name, Type[] parameterTypes, Type returnType,
                            Expression[] arguments,
                            String filename, int lineNumber) {
        super(filename, lineNumber);
        this.className = className;
        this.name = name;
        this.arguments = arguments;
        this.parameterTypes = parameterTypes;
        this.returnType = returnType;
    }

    /** Create a static method invocation
     * @param name The name of the method
     * @param parameterTypes The method parameter types
     * @param returnType The method return type
     * @param arguments The method argument values
     */
    public CallStaticMethod(String name, Type[] parameterTypes, Type returnType,
                            Expression[] arguments) {
        super(null, 0);
        this.className = null;
        this.name = name;
        this.arguments = arguments;
        this.parameterTypes = parameterTypes;
        this.returnType = returnType;
    }

    /** Create a static method invocation
     * @param name The name of the method
     * @param parameterTypes The method parameter types
     * @param returnType The method return type
     * @param arguments The method argument values
     * @param filename The source filename this expression is associated with
     * @param lineNumber The source line number this expression is associated with
     */
    public CallStaticMethod(String name, Type[] parameterTypes, Type returnType,
                            Expression[] arguments,
                            String filename, int lineNumber) {
        super(filename, lineNumber);
        this.className = null;
        this.name = name;
        this.arguments = arguments;
        this.parameterTypes = parameterTypes;
        this.returnType = returnType;
    }

    public Type getType() {
        return returnType;
    }

    public void findCaptured(Environment env) {
        for (Expression expr: arguments) {
            expr.findCaptured(env);
        }
    }

    @Override
    public void generate(ClassGenerator generator, Environment env) {
        String invokeClassName = className;
        if (invokeClassName == null) {
            invokeClassName = generator.currentClass.getFullClassName();
        }
        for (int i=0; i < arguments.length; i++) {
            Expression expr = arguments[i];
            if (generator.options.autobox) {
                expr = Autobox.autobox(expr, parameterTypes[i]);
            }
            expr.generate(generator, env);
        }
        generator.instGen.invokestatic(
                generator.className(invokeClassName),
                name, generator.methodDescriptor(parameterTypes, returnType));
    }
}
