package com.wutka.jfuncmachine.compiler.model.expr;

import com.wutka.jfuncmachine.compiler.classgen.ClassGenerator;
import com.wutka.jfuncmachine.compiler.classgen.EnvVar;
import com.wutka.jfuncmachine.compiler.classgen.Environment;
import com.wutka.jfuncmachine.compiler.classgen.Label;
import com.wutka.jfuncmachine.compiler.model.Access;
import com.wutka.jfuncmachine.compiler.model.ClassDef;
import com.wutka.jfuncmachine.compiler.model.MethodDef;
import com.wutka.jfuncmachine.compiler.model.expr.boxing.Autobox;
import com.wutka.jfuncmachine.compiler.model.expr.boxing.Box;
import com.wutka.jfuncmachine.compiler.model.expr.javainterop.CallJavaStaticMethod;
import com.wutka.jfuncmachine.compiler.model.types.*;
import com.wutka.jfuncmachine.runtime.TailCall;
import org.objectweb.asm.Opcodes;

/** An expression to invoke a static method.
 * This method differs from the methods in the javainterop package in that it can apply certain optimizations.
 * For example, if this method call is a recursive call to the method currently being defined, and the
 * localTailCallsToLoops option is true, this expression updates the local variables representing the
 * method parameters and jumps back to the beginning of the method.
 * Likewise, if full tail recursion is enabled, this method should be used for any methods generated by
 * JFuncMachine so it can implement the looping necessary to handle full tail calls.
 */
public class CallStaticMethod extends Expression {
    /** The name of the class containing the method */
    public final String className;
    /** The name of the method */
    public final String name;
    /** The method argument values */
    public final Expression[] arguments;
    /** The method parameter types */
    public final Type[] parameterTypes;
    /** The return type of the method */
    public final Type returnType;

    /** Create a static method invocation
     * @param className The name of the class containing the method
     * @param name The name of the method
     * @param parameterTypes The method parameter types
     * @param returnType The method return type
     * @param arguments The method argument values
     */
    public CallStaticMethod(String className, String name, Type[] parameterTypes, Type returnType,
                            Expression[] arguments) {
        super(null, 0);
        this.className = className;
        this.name = name;
        this.arguments = arguments;
        this.parameterTypes = parameterTypes;
        this.returnType = returnType;
    }

    /** Create a static method invocation
     * @param className The name of the class containing the method
     * @param name The name of the method
     * @param parameterTypes The method parameter types
     * @param returnType The method return type
     * @param arguments The method argument values
     * @param filename The source filename this expression is associated with
     * @param lineNumber The source line number this expression is associated with
     */
    public CallStaticMethod(String className, String name, Type[] parameterTypes, Type returnType,
                            Expression[] arguments,
                            String filename, int lineNumber) {
        super(filename, lineNumber);
        this.className = className;
        this.name = name;
        this.arguments = arguments;
        this.parameterTypes = parameterTypes;
        this.returnType = returnType;
    }

    /** Create a static method invocation
     * @param name The name of the method
     * @param parameterTypes The method parameter types
     * @param returnType The method return type
     * @param arguments The method argument values
     */
    public CallStaticMethod(String name, Type[] parameterTypes, Type returnType,
                            Expression[] arguments) {
        super(null, 0);
        this.className = null;
        this.name = name;
        this.arguments = arguments;
        this.parameterTypes = parameterTypes;
        this.returnType = returnType;
    }

    /** Create a static method invocation
     * @param name The name of the method
     * @param parameterTypes The method parameter types
     * @param returnType The method return type
     * @param arguments The method argument values
     * @param filename The source filename this expression is associated with
     * @param lineNumber The source line number this expression is associated with
     */
    public CallStaticMethod(String name, Type[] parameterTypes, Type returnType,
                            Expression[] arguments,
                            String filename, int lineNumber) {
        super(filename, lineNumber);
        this.className = null;
        this.name = name;
        this.arguments = arguments;
        this.parameterTypes = parameterTypes;
        this.returnType = returnType;
    }

    public Type getType() {
        return returnType;
    }

    public void findCaptured(Environment env) {
        for (Expression expr: arguments) {
            expr.findCaptured(env);
        }
    }

    @Override
    public void generate(ClassGenerator generator, Environment env, boolean inTailPosition) {
        String invokeClassName = className;
        if (invokeClassName == null) {
            invokeClassName = generator.currentClass.getFullClassName();
        }
        if (!inTailPosition || (generator.options.localTailCallsToLoops &&
                isCurrentFunc(generator.currentClass, generator.currentMethod))) {
            for (int i = 0; i < arguments.length; i++) {
                Expression expr = arguments[i];
                if (generator.options.autobox) {
                    expr = Autobox.autobox(expr, parameterTypes[i]);
                }
                expr.generate(generator, env, false);
            }
        }
        if (inTailPosition && generator.options.localTailCallsToLoops &&
                isCurrentFunc(generator.currentClass, generator.currentMethod)) {
            for (int i=0; i < arguments.length; i++) {
                generator.instGen.rawIntOpcode(EnvVar.setOpcode(arguments[i].getType()), i);
            }
            generator.instGen.gotolabel(generator.currentMethod.startLabel);
        } else if (inTailPosition && generator.options.fullTailCalls) {
            new Lambda(new Field[0], new ObjectType(),
                    new Box(new CallJavaStaticMethod(invokeClassName, name, parameterTypes, returnType,
                            arguments))).generate(generator, env, false);
        } else{
            generator.instGen.invokestatic(
                    generator.className(invokeClassName),
                    name, generator.methodDescriptor(parameterTypes, returnType));

            if (generator.options.fullTailCalls) {
                Label loopStart = new Label();
                Label loopEnd = new Label();
                generator.instGen.label(loopStart);
                generator.instGen.dup();
                generator.instGen.instance_of(TailCall.class.getName());
                generator.instGen.rawJumpOpcode(Opcodes.IFEQ, loopEnd);
                generator.instGen.invokeinterface(TailCall.class.getName(), "invoke",
                        generator.methodDescriptor(new Type[0], new ObjectType()));
                generator.instGen.gotolabel(loopStart);
                generator.instGen.label(loopEnd);
                if (returnType.getBoxType() != null) {
                    switch (returnType) {
                        case BooleanType b -> generator.instGen.invokevirtual("java.lang.Boolean",
                                "booleanValue", "()Z");
                        case ByteType b -> generator.instGen.invokevirtual("java.lang.Byte",
                                "byteValue", "()B");
                        case CharType c -> generator.instGen.invokevirtual("java.lang.Character",
                                "charValue", "()C");
                        case DoubleType d -> generator.instGen.invokevirtual("java.lang.Double",
                                "doubleValue", "()D");
                        case FloatType f -> generator.instGen.invokevirtual("java.lang.Float",
                                "floatValue", "()F");
                        case IntType i -> generator.instGen.invokevirtual("java.lang.Integer",
                                "intValue", "()I");
                        case LongType l -> generator.instGen.invokevirtual("java.lang.Long",
                                "longValue", "()J");
                        case ShortType s -> generator.instGen.invokevirtual("java.lang.Short",
                                "shortValue", "()S");
                        default -> {}
                    };
                }
            }
        }
    }

    protected boolean isCurrentFunc(ClassDef currentClass, MethodDef currentMethod) {
        if ((currentMethod.access & Access.STATIC) == 0) return false;
        if (!className.equals(currentClass.getFullClassName())) return false;
        if (!name.equals(currentMethod.name)) return false;
        if (parameterTypes.length != currentMethod.parameters.length) return false;
        for (int i=0; i < parameterTypes.length; i++) {
            if (!parameterTypes[i].equals(currentMethod.parameters[i].type)) return false;
        }
        return true;
    }
}
