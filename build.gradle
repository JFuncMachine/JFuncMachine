
plugins {
    id 'application'
    id 'maven-publish'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

group = 'org.jfuncmachine'
version = '0.1.0'

repositories {
    mavenLocal()
    mavenCentral()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'JFuncMachine'
                description = 'A library for building functional languages'
                url = 'https://github.com/JFuncMachine/JFuncMachine'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'wutka'
                        name = 'Mark Wutka'
                        email = 'mark@wutka.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/JFuncMachine/JFuncMachine'
                    developerConnection = 'scm:git:ssh:JFuncMachine/JFuncMachine.git'
                    url = 'https://github.com/JFuncMachine/JFuncMachine'
                }
            }
            groupId = 'org.jfuncmachine'
            artifactId = 'jfuncmachine'
            version = '0.1.0'

            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}


run {
    standardInput = System.in
    standardOutput = System.out
}

application {
    mainClass = 'org.jfuncmachine.sexprlang.compiler.Main'
}


dependencies {
    implementation 'io.github.classgraph:classgraph:4.8.165'
    implementation 'org.ow2.asm:asm-tree:9.6'
    testImplementation platform('org.junit:junit-bom:5.9.3')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

task copyJar(type: Copy) {
    from jar
    into "."
    rename ".*.jar", "jfuncmachine.jar"
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class':  'org.jfuncmachine.sexprlang.compiler.Main'
    }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}