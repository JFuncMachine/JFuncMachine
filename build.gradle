
plugins {
    id 'application'
    id 'signing'
    id 'maven-publish'
    id('io.github.gradle-nexus.publish-plugin') version '1.1.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

group = 'org.jfuncmachine'
version = '1.0.0'

repositories {
    mavenLocal()
    mavenCentral()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'JFuncMachine'
                description = 'A library for building functional languages'
                url = 'https://www.jfuncmachine.org'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/JFuncMachine/JFuncMachine/main/MIT-LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'wutkajfm'
                        name = 'Mark Wutka'
                        email = 'wutka@jfuncmachine.org'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/JFuncMachine/JFuncMachine'
                    developerConnection = 'scm:git:ssh:JFuncMachine/JFuncMachine.git'
                    url = 'https://github.com/JFuncMachine/JFuncMachine'
                }
            }
            groupId = 'org.jfuncmachine'
            artifactId = 'jfuncmachine'
            version = '1.0.0'

            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}


run {
    standardInput = System.in
    standardOutput = System.out
}

application {
    mainClass = 'org.jfuncmachine.sexprlang.compiler.Main'
}


dependencies {
    implementation 'io.github.classgraph:classgraph:4.8.165'
    implementation 'org.ow2.asm:asm-tree:9.6'
    testImplementation platform('org.junit:junit-bom:5.9.3')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

javadoc {
    exclude("org/jfuncmachine/examples/**")
    options.memberLevel = JavadocMemberLevel.PUBLIC
}

task copyJar(type: Copy) {
    from jar
    into "."
    rename ".*.jar", "jfuncmachine.jar"
}

//jar {
//    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
//    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
//}

java {
    withJavadocJar()
    withSourcesJar()
}

nexusPublishing {
    repositories {
        sonatype {  //only for users registered in Sonatype after 24 Feb 2021
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

ext.genOutputDir = file("$buildDir/generated-resources")
task generateVersionTxt()  {
    ext.outputFile = file("$genOutputDir/version.txt")
    outputs.file(outputFile)
    doLast {
        outputFile.text = """GroupId: ${project.group}
Name: ${project.name}
Version: $version
Build-time: ${java.time.LocalDateTime.now()}
"""
    }
}
